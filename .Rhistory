setwd("~/Documentos/Code/Machine_Learning_R")
setwd("~/Documentos/Code/Machine_Learning_R/05 - supportVectorRegression")
install.packages(e1071)
source("~/Documentos/Code/Machine_Learning_R/05 - supportVectorRegression/supportVectorRegression.R", echo=TRUE)
source("~/Documentos/Code/Machine_Learning_R/05 - supportVectorRegression/supportVectorRegression.R")
dataset = read.csv('/home/leonardokruss/Documentos/Code/Machine_Learning_R/05 - supportVectorRegression/Positon_Salaries.csv')
dataset = dataset [2:3]
dataset = read.csv('/home/leonardokruss/Documentos/Code/Machine_Learning_R/05 - supportVectorRegression/Positon_Salaries.csv')
dataset = read.csv('/home/leonardokruss/Documentos/Code/Machine_Learning_R/05 - supportVectorRegression/Position_Salaries.csv')
dataset = dataset [2:3]
install.packages('e1071')
regresson = svm(formula = Salary ~ ., data = dataset, type = 'eps-regression')
library(e1071)
regresson = svm(formula = Salary ~ ., data = dataset, type = 'eps-regression')
y_pred = predict(regressor, data.frame(level = 6.5))
y_pred = predict(regressor, data.frame(level = 6.5))
regressor = svm(formula = Salary ~ ., data = dataset, type = 'eps-regression')
View(regresson)
View(regresson)
regressor = svm(formula = Salary ~ ., data = dataset, type = 'eps-regression')
y_pred = predict(regressor, data.frame(level = 6.5))
y_pred = predict(regressor, data.frame(Level = 6.5))
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset), colour = 'blue')) +
ggtitle('Truth or Bluff (SVR)') +
xlab('Level') +
ylab('Salary')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset), colour = 'blue')) +
ggtitle('Truth or Bluff (SVR)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset), colour = 'blue')) +
ggtitle('Truth or Bluff (SVR)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)), colour = 'blue') +
ggtitle('Truth or Bluff (SVR)') +
xlab('Level') +
ylab('Salary')
setwd("~/Documentos/Code/Machine_Learning_R/06 - decisionTreeRegression")
install.packages('rpart')
dataset = read.csv('/home/leonardokruss/Documentos/Code/Machine_Learning_R/06 - decisionTreeRegression/Position_Salaries.csv')
dataset = dataset[2:3]
View(dataset)
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset)
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Decision Tree Regression Model results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree Regression)') +
xlab('Level') +
ylab('Salary')
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree Regression)') +
xlab('Level') +
ylab('Salary')
# Visualising the Decision Tree Regression Model results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree Regression)') +
xlab('Level') +
ylab('Salary')
y_pred = predict(regressor, data.frame(Level = 6.5))
setwd("~/Documentos/Code/Machine_Learning_R/07 - randomForestIntuition")
setwd("~/Documentos/Code/Machine_Learning_R/07 - randomForestIntuition")
install.packages('randomForest')
library(randomForest)
dataset = read.csv('/home/leonardokruss/Documentos/Code/Machine_Learning_R/07 - randomForestIntuition/Position_Salaries.csv')
dataset = dataset[2:3]
library(randomForest)
set.seed(1234)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 10)
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Randon Forest Regression Model)') +
xlab('Level') +
ylab('Salary')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Randon Forest Regression Model)') +
xlab('Level') +
ylab('Salary')
y_pred = predict(regressor, data.frame(Level = 6.5))
set.seed(1234)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 10)
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Randon Forest Regression Model)') +
xlab('Level') +
ylab('Salary')
set.seed(1234)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 500)
y_pred = predict(regressor, data.frame(Level = 6.5))
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Randon Forest Regression Model)') +
xlab('Level') +
ylab('Salary')
# K-Nearest Neighbors (K-NN)
# Importing the dataset
dataset = read.csv('/home/leonardokruss/Documentos/Arquivos Machine Learning/Arquivos Regress√µes/Part 3 - Classification/Section 15 - K-Nearest Neighbors (K-NN)/R/Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting K-NN to the Training set and Predicting the Test set results
library(class)
y_pred = knn(train = training_set[, -3],
test = test_set[, -3],
cl = training_set[, 3],
k = 5,
prob = TRUE)
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
# Visualising the Training set results
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[, -3], test = grid_set, cl = training_set[, 3], k = 5)
plot(set[, -3],
main = 'K-NN (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Visualising the Test set results
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[, -3], test = grid_set, cl = training_set[, 3], k = 5)
plot(set[, -3],
main = 'K-NN (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
